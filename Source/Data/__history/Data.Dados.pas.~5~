unit Data.Dados;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.SQLite,
  FireDAC.Phys.SQLiteDef, FireDAC.Stan.ExprFuncs, FireDAC.VCLUI.Wait,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, FireDAC.Comp.UI;

type
  TDados = class(TDataModule)
    FDConnection: TFDConnection;
    FDPhysSQLiteDriverLink: TFDPhysSQLiteDriverLink;
    FDGUIxWaitCursor: TFDGUIxWaitCursor;
    FDQuery: TFDQuery;
    dsRelatorioAbastecimentos: TDataSource;
    qryRelatorioAbastecimentos: TFDQuery;
  private
    { Private declarations }
  public
    { Public declarations }
    procedure FiltrarRelatorioAbastecimentos(const ADataInicial, ADataFinal: TDateTime);
  end;

var
  Dados: TDados;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TDados }

procedure TDados.FiltrarRelatorioAbastecimentos(const ADataInicial,
  ADataFinal: TDateTime);
begin
  qryRelatorioAbastecimentos.Close;
  qryRelatorioAbastecimentos.SQL.Clear;
  qryRelatorioAbastecimentos.SQL.Add('SELECT');
  qryRelatorioAbastecimentos.SQL.Add('  DATE(A.DATA) AS DATA,');
  qryRelatorioAbastecimentos.SQL.Add('  DATETIME(A.DATA) AS DATA_HORA,');
  qryRelatorioAbastecimentos.SQL.Add('  T.TANQUE_ID,');
  qryRelatorioAbastecimentos.SQL.Add('  T.DESCRICAO AS TANQUE,');
  qryRelatorioAbastecimentos.SQL.Add('  B.DESCRICAO AS BOMBA,');
  qryRelatorioAbastecimentos.SQL.Add('  B.BOMBA_ID,');
  qryRelatorioAbastecimentos.SQL.Add('  A.VALOR_PAGO');
  qryRelatorioAbastecimentos.SQL.Add('FROM');
  qryRelatorioAbastecimentos.SQL.Add('  ABASTECIMENTO A');
  qryRelatorioAbastecimentos.SQL.Add('  INNER JOIN BOMBA B');
  qryRelatorioAbastecimentos.SQL.Add('    ON B.BOMBA_ID = A.BOMBA_ID');
  qryRelatorioAbastecimentos.SQL.Add('  INNER JOIN TANQUE T');
  qryRelatorioAbastecimentos.SQL.Add('    ON T.TANQUE_ID = B.TANQUE_ID');
  qryRelatorioAbastecimentos.SQL.Add('WHERE');
  qryRelatorioAbastecimentos.SQL.Add('  DATE(A.DATA) BETWEEN :DATA_INICIAL AND :DATA_FINAL');
  qryRelatorioAbastecimentos.SQL.Add('GROUP BY');
  qryRelatorioAbastecimentos.SQL.Add('  A.DATA, T.TANQUE_ID, B.BOMBA_ID');
  qryRelatorioAbastecimentos.SQL.Add('ORDER BY');
  qryRelatorioAbastecimentos.SQL.Add('  A.DATA, T.TANQUE_ID, B.BOMBA_ID');
  qryRelatorioAbastecimentos.Params.ParamByName('DATA_INICIAL').AsDateTime := ADataInicial;
  qryRelatorioAbastecimentos.Params.ParamByName('DATA_FINAL').AsDateTime := ADataFinal;
  qryRelatorioAbastecimentos.Open;
end;

end.

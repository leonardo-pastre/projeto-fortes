unit Model.Bomba;

interface

type
  TBomba = class
  private
    FDescricao: string;
    FId: Integer;
    FCombustivel: TCombustivel;
    FIdTanque: Integer;
  public
    constructor Create(const AIdTanque: Integer; const ACombustivel: TCombustivel; const ADescricao: string); overload;
    constructor Create(const AId, AIdTanque: Integer; const ACombustivel: TCombustivel; const ADescricao: string); overload;
    property Id: Integer read FId;
    property IdTanque: Integer read FIdTanque;
    property Combustivel: TCombustivel read FCombustivel;
    property Descricao: string read FDescricao;
  end;

implementation

uses
  System.SysUtils;

{ TBomba }

constructor TBomba.Create(const AIdTanque: Integer;
  const ACombustivel: TCombustivel; const ADescricao: string);
begin
  Create(-1, AIdTanque, ACombustivel, ADescricao);
end;

constructor TBomba.Create(const AId, AIdTanque: Integer;
  const ACombustivel: TCombustivel; const ADescricao: string);
begin
  if AIdTanque <= 0 then
    raise Exception.Create('Identificador do tanque inválido');

  if not Assigned(ACombustivel) then
    raise Exception.Create('Combustível não associado a bomba');

  FId := AId;
  FIdTanque := AIdTanque;
  FCombustivel := ACombustivel;
  FDescricao := ADescricao;
end;

end.
